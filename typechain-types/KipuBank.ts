/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface KipuBankInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "getRemainingBankCapacity"
      | "getVault"
      | "i_bankCap"
      | "i_withdrawalCapPerTx"
      | "s_totalDepositsCount"
      | "s_totalWithdrawalsCount"
      | "s_userDepositsCount"
      | "s_userWithdrawalsCount"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "KipuBank_Deposited" | "KipuBank_Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRemainingBankCapacity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "i_bankCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "i_withdrawalCapPerTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_totalDepositsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_totalWithdrawalsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_userDepositsCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "s_userWithdrawalsCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingBankCapacity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "i_bankCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "i_withdrawalCapPerTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_totalDepositsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_totalWithdrawalsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_userDepositsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_userWithdrawalsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace KipuBank_DepositedEvent {
  export type InputTuple = [
    account: AddressLike,
    amount: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    amount: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    account: string;
    amount: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KipuBank_WithdrawnEvent {
  export type InputTuple = [
    account: AddressLike,
    amount: BigNumberish,
    newBalance: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    amount: bigint,
    newBalance: bigint
  ];
  export interface OutputObject {
    account: string;
    amount: bigint;
    newBalance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KipuBank extends BaseContract {
  connect(runner?: ContractRunner | null): KipuBank;
  waitForDeployment(): Promise<this>;

  interface: KipuBankInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<[], [void], "payable">;

  getRemainingBankCapacity: TypedContractMethod<[], [bigint], "view">;

  getVault: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        balance: bigint;
        deposits: bigint;
        withdrawals: bigint;
      }
    ],
    "view"
  >;

  i_bankCap: TypedContractMethod<[], [bigint], "view">;

  i_withdrawalCapPerTx: TypedContractMethod<[], [bigint], "view">;

  s_totalDepositsCount: TypedContractMethod<[], [bigint], "view">;

  s_totalWithdrawalsCount: TypedContractMethod<[], [bigint], "view">;

  s_userDepositsCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  s_userWithdrawalsCount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getRemainingBankCapacity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        balance: bigint;
        deposits: bigint;
        withdrawals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "i_bankCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "i_withdrawalCapPerTx"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_totalDepositsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_totalWithdrawalsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_userDepositsCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "s_userWithdrawalsCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "KipuBank_Deposited"
  ): TypedContractEvent<
    KipuBank_DepositedEvent.InputTuple,
    KipuBank_DepositedEvent.OutputTuple,
    KipuBank_DepositedEvent.OutputObject
  >;
  getEvent(
    key: "KipuBank_Withdrawn"
  ): TypedContractEvent<
    KipuBank_WithdrawnEvent.InputTuple,
    KipuBank_WithdrawnEvent.OutputTuple,
    KipuBank_WithdrawnEvent.OutputObject
  >;

  filters: {
    "KipuBank_Deposited(address,uint256,uint256)": TypedContractEvent<
      KipuBank_DepositedEvent.InputTuple,
      KipuBank_DepositedEvent.OutputTuple,
      KipuBank_DepositedEvent.OutputObject
    >;
    KipuBank_Deposited: TypedContractEvent<
      KipuBank_DepositedEvent.InputTuple,
      KipuBank_DepositedEvent.OutputTuple,
      KipuBank_DepositedEvent.OutputObject
    >;

    "KipuBank_Withdrawn(address,uint256,uint256)": TypedContractEvent<
      KipuBank_WithdrawnEvent.InputTuple,
      KipuBank_WithdrawnEvent.OutputTuple,
      KipuBank_WithdrawnEvent.OutputObject
    >;
    KipuBank_Withdrawn: TypedContractEvent<
      KipuBank_WithdrawnEvent.InputTuple,
      KipuBank_WithdrawnEvent.OutputTuple,
      KipuBank_WithdrawnEvent.OutputObject
    >;
  };
}
